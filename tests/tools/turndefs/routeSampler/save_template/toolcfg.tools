<configuration>
    <arrival-attribute value="None" type="string" help="Read arrival counts from the given edgeData file attribute"/>
    <begin value="None" type="string" help="custom begin time (seconds or H:M:S)"/>
    <depart-attribute value="None" type="string" help="Read departure counts from the given edgeData file attribute"/>
    <edgedata-attribute value="entered" type="string" help="Read edgeData counts from the given attribute"/>
    <edgedata-files value="None" type="string" help="Input edgeData file (for counts)"/>
    <end value="None" type="string" help="custom end time (seconds or H:M:S)"/>
    <geh-ok value="5" type="float" help="threshold for acceptable GEH values"/>
    <interval value="None" type="string" help="custom aggregation interval (seconds or H:M:S)"/>
    <min-count value="1" type="int" help="Set minimum number of counting locations that a route must visit"/>
    <minimize-vehicles value="0" type="float" help="Set optimization factor from [0, 1[ for reducing the number of vehicles(prefer routes that pass multiple counting locations over routes that pass fewer)"/>
    <mismatch-output value="None" type="string" help="write cout-data with overflow/underflow information to FILE"/>
    <od-files value="None" type="string" help="Input edgeRelation file for origin-destination counts"/>
    <optimize value="None" type="string" help="set optimization method level (full, INT boundary)"/>
    <optimize-input value="False" type="string" help="Skip resampling and run optimize directly on the input routes"/>
    <output-file value="out.rou.xml" type="string" help="Output route file"/>
    <pedestrians value="False" type="string" help="write person walks instead of vehicle routes"/>
    <prefix value="" type="string" help="prefix for the vehicle ids"/>
    <route-files value="None" type="string" help="Input route file"/>
    <seed value="42" type="int" help="random seed"/>
    <threads value="1" type="int" help="If parallelization is desired, enter the number of CPUs to use. Set to a value >> then your machines CPUs if you want to utilize all CPUs (Default is 1)"/>
    <total-count value="None" type="string" help="Set a total count that should be reached (either as single value that is split  proportionally among all intervals or as a list of counts per interval). Setting the value 'input' preserves input vehicle counts in each interval."/>
    <turn-attribute value="count" type="string" help="Read turning counts from the given attribute"/>
    <turn-files value="None" type="string" help="Input turn-count file"/>
    <turn-max-gap value="0" type="int" help="Allow at most a gap of INT edges between from-edge and to-edge"/>
    <turn-ratio-abs-tolerance value="1" type="int" help="Set tolerance for error in resulting turning ratios as absolute count"/>
    <turn-ratio-attribute value="None" type="string" help="Read turning ratios from the given attribute"/>
    <turn-ratio-tolerance value="None" type="float" help="Set tolerance for error in resulting ratios (relative to turn-ratio-total)"/>
    <turn-ratio-total value="1" type="float" help="Set value for normalizing turning ratios (default 1)"/>
    <attributes value="" type="string" help="additional vehicle attributes"/>
    <verbose value="False" type="string" help="tell me what you are doing"/>
    <verbose.histograms value="False" type="string" help="print histograms of edge numbers and detector passing count"/>
    <weighted value="False" type="string" help="Sample routes according to their probability (or count)"/>
    <write-flows value="None" type="string" help="write flows with the give style instead of vehicles [number|probability|poisson]"/>
    <write-route-distribution value="None" type="string" help="write routeDistribution with the given ID instead of individual routes"/>
    <write-route-ids value="False" type="string" help="write routes with ids"/>
</configuration>
